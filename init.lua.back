local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
	{
		"nvim-treesitter/nvim-treesitter",
		config = function () 
			require("nvim-treesitter.configs").setup({
				ensure_installed = { "typescript", "lua", "javascript", "java", "python", "tsx" },

				sync_install = false,
				auto_install = true,
				highlight = {
					enable = true,
				}
			}) 
		end,
		build = function () 
			vim.cmd("TSUpdate")
		end
	},
	{
		"williamboman/mason.nvim",
    		config = function ()
			require('mason').setup({})
			require('mason-lspconfig').setup({
    				ensure_installed = {
					'lua_ls',
					'bashls',
					'tsserver'
					}
				})

			local lspconfig = require('lspconfig')
			lspconfig.lua_ls.setup({})

			lspconfig.bashls.setup({})

			lspconfig.tsserver.setup({})
    			end,
    		dependencies = {
			"williamboman/mason-lspconfig.nvim",
    		},
	},
	{
		"neovim/nvim-lspconfig",
		config = function() 
					end,
	},
	{
		"nvim-neo-tree/neo-tree.nvim",
		 dependencies = {
      			"nvim-lua/plenary.nvim",
      			"nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
      			"MunifTanjim/nui.nvim",
     	 -- "3rd/image.nvim", -- Optional image support in preview window: See `# Preview Mode` for more information
    		}
	},
	{
  		"gnikdroy/projections.nvim",
		config = function()
			require("projections").setup({
				workspaces = {
					"~/Projects"
				}
			})
		end
	},
	{
		"NvChad/nvim-colorizer.lua",
		config = function() 
			require("colorizer").setup({
				
			})
		end
	},
	{
		"onsails/lspkind.nvim",
		config = function()
			require('lspkind').init({
				mode = 'symbol_text',
				preset = 'codicons',
			})
		end
	},
	{
		"folke/trouble.nvim",
		requires = "kyazdani42/nvim-web-devicons",
		config = function () 
			require("trouble").setup()
		end
	},
	{
		'nvim-lualine/lualine.nvim',
		requires = { 'nvim-tree/nvim-web-devicons', opt = true },
		config = function()
			require('lualine').setup()
		end,
		module = false
	},
	{
		'shaunsingh/nord.nvim',
	},
	{ 'hrsh7th/cmp-nvim-lsp' },
	{ 'hrsh7th/cmp-buffer' },
	{ 'hrsh7th/cmp-path' },
	{ 'hrsh7th/cmp-cmdline' },
	{ 'hrsh7th/nvim-cmp' },
	{
		'nvim-telescope/telescope.nvim', 
		tag = '0.1.6',
		dependencies = { 'nvim-lua/plenary.nvim' }
	}

})

vim.cmd("colorscheme nord")

vim.wo.number = true
vim.api.nvim_create_autocmd('ModeChanged', {
	callback = function () 
		local new_mode = vim.v.event.new_mode
		vim.wo.relativenumber = new_mode == 'i'
	end
})



-- Set up lspconfig.
local capabilities = require('cmp_nvim_lsp').default_capabilities()
require('lspconfig')['tsserver'].setup {capabilities = capabilities}

	local lspconfig = require('lspconfig')
			lspconfig.lua_ls.setup({})
			lspconfig.bashls.setup({})
			lspconfig.tsserver.setup({})
			lspconfig.prismals.setup({})



			vim.keymap.set('n', '<leader>lD', vim.diagnostic.open_float)
			vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
			vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
			vim.keymap.set('n', '<leader>ld', vim.diagnostic.setloclist)

			vim.api.nvim_create_autocmd('LspAttach', {
    				group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    				callback = function(ev)
       					 -- Enable completion triggered by <c-x><c-o>
        				vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

        				local opts = {buffer = ev.buf}
        				vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
        				vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
        				vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
        				vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
        				-- vim.keymap
        				--     .set('n', '<Leader>sa', vim.lsp.buf.add_workspace_folder, opts)
       					-- vim.keymap.set('n', '<Leader>sr', vim.lsp.buf.remove_workspace_folder,
        				--                opts)
       					-- vim.keymap.set('n', '<Leader>sl', function()
        				--     print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
        				-- end, opts)
        				-- vim.keymap.set('n', '<Leader>D', vim.lsp.buf.type_definition, opts)
        				vim.keymap.set('n', '<Leader>lr', vim.lsp.buf.rename, opts)
        				vim.keymap.set({'n', 'v'}, '<Leader>la', vim.lsp.buf.code_action, opts)
        				-- vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
        				vim.keymap.set('n', '<Leader>lf',
                       				function() vim.lsp.buf.format {async = true} end, opts)
    						end
					})

local cmp = require 'cmp'

cmp.setup({
    snippet = {
        -- REQUIRED - you must specify a snippet engine
        expand = function(args)
            vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
            -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
            -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
            -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
        end
    },
    window = {
        completion = cmp.config.window.bordered(),
        documentation = cmp.config.window.bordered()
    },
    mapping = cmp.mapping.preset.insert({
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({select = true}),
        ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
            else
                fallback()
            end
        end, {"i", "s"}),
        ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
            else
                fallback()
            end
        end, {"i", "s"})
    }),
    sources = cmp.config.sources({
        {name = 'nvim_lsp'}, {name = 'vsnip'} -- For vsnip users.
    }, {{name = 'buffer'}, {name = 'nvim_lsp_signature_help'}})
})

-- Set configuration for specific filetype.
cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
        {name = 'cmp_git'} -- You can specify the `cmp_git` source if you were installed it.
    }, {{name = 'buffer'}})
})

-- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline({'/', '?'}, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {{name = 'buffer'}}
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({{name = 'path'}}, {{name = 'cmdline'}})
})


local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})
